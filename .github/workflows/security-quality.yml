name: Security and Quality Gates

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 0'  # Weekly security scan

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep
        pip install -r requirements.txt
    
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json
        bandit -r . -f txt
      continue-on-error: true
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json
        safety check
      continue-on-error: true
    
    - name: Run Semgrep
      run: |
        semgrep --config=auto --json --output=semgrep-report.json .
        semgrep --config=auto .
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy pylint
        pip install -r requirements.txt
    
    - name: Check code formatting (Black)
      run: black --check --diff .
    
    - name: Check import sorting (isort)
      run: isort --check-only --diff .
    
    - name: Lint with flake8
      run: flake8 . --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Type checking (MyPy)
      run: mypy . --ignore-missing-imports
      continue-on-error: true
    
    - name: Pylint analysis
      run: pylint **/*.py --output-format=json > pylint-report.json || true
    
    - name: Upload quality reports
      uses: actions/upload-artifact@v3
      with:
        name: quality-reports
        path: pylint-report.json

  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Dependency vulnerability scan
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt
        format: json
        output: dependency-audit.json
    
    - name: License compliance check
      run: |
        pip install pip-licenses
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=table
    
    - name: Upload dependency reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-reports
        path: |
          dependency-audit.json
          licenses.json

  performance-test:
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
    
    - name: Build Docker image
      run: docker build -t test-app .
    
    - name: Start test environment
      run: |
        docker run -d --name test-container -p 5000:5000 \
          -e AWS_ACCESS_KEY_ID=test \
          -e AWS_SECRET_ACCESS_KEY=test \
          -e S3_BUCKET_NAME=test-bucket \
          test-app
        sleep 10
    
    - name: Run load tests
      run: |
        echo "from locust import HttpUser, task
        class WebsiteUser(HttpUser):
            @task
            def index_page(self):
                self.client.get('/')
            
            @task
            def health_check(self):
                self.client.get('/health')
        " > locustfile.py
        
        locust -f locustfile.py --headless --users 10 --spawn-rate 2 \
          --host http://localhost:5000 --run-time 60s --html performance-report.html
    
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.html
    
    - name: Cleanup
      run: |
        docker stop test-container
        docker rm test-container

  quality-gate:
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, dependency-check, performance-test]
    if: always()
    
    steps:
    - name: Quality Gate
      run: |
        echo "=== Quality Gate Results ==="
        
        if [ "${{ needs.security-scan.result }}" != "success" ]; then
          echo "‚ùå Security scan failed"
          exit 1
        else
          echo "‚úÖ Security scan passed"
        fi
        
        if [ "${{ needs.code-quality.result }}" != "success" ]; then
          echo "‚ùå Code quality checks failed"
          exit 1
        else
          echo "‚úÖ Code quality checks passed"
        fi
        
        if [ "${{ needs.dependency-check.result }}" != "success" ]; then
          echo "‚ùå Dependency check failed"
          exit 1
        else
          echo "‚úÖ Dependency check passed"
        fi
        
        if [ "${{ needs.performance-test.result }}" != "success" ]; then
          echo "‚ö†Ô∏è Performance tests failed (non-blocking)"
        else
          echo "‚úÖ Performance tests passed"
        fi
        
        echo "üéâ All quality gates passed!"